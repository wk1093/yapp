#include "main.yapp.h"

#define pub
#define priv

__attribute__ ( ( annotate ( "pub" ) ) ) std :: vector < std :: string > preprocStored ;

__attribute__ ( ( annotate ( "pub" ) ) ) std :: string prePreprocess ( const std :: string & inputFile , const std :: string & outputDir , bool stdlib ) { std :: ifstream in ( inputFile ) ; if ( ! in ) { std :: cerr << "Failed to open input file for pre-preprocessing: " << inputFile << "\n" ; exit ( 1 ) ; } std :: ostringstream out ; std :: string line ; if ( stdlib ) { preprocStored . push_back ( "include \"std.main.yapp.h\"\n#include \"std.str.yapp.h\"\n#include \"std.vec.yapp.h\"\n#include \"std.result.yapp.h\"\n" ) ; out << "pub __attribute__((annotate(\"__pub_preproc__\"))) void __pub_preproc__0();" ; } std :: regex pubPreproc ( R"(^\s*#pub\s+(.*?)$)" ) ; std :: regex importPreproc ( R"(^\s*#import\s+(.*?)$)" ) ; while ( std :: getline ( in , line ) ) { std :: smatch m ; if ( std :: regex_search ( line , m , pubPreproc ) ) { preprocStored . push_back ( m [ 1 ] . str ( ) ) ; out << "pub __attribute__((annotate(\"__pub_preproc__\"))) void __pub_preproc__" << preprocStored . size ( ) - 1 << "();\n" ; } else if ( std :: regex_search ( line , m , importPreproc ) ) { std :: string importedFile = m [ 1 ] . str ( ) ; bool angledQuotes = ( importedFile [ 0 ] == '<' && importedFile [ importedFile . size ( ) - 1 ] == '>' ) ; bool doubleQuotes = ( importedFile [ 0 ] == '"' && importedFile [ importedFile . size ( ) - 1 ] == '"' ) ; if ( angledQuotes || doubleQuotes ) { importedFile = importedFile . substr ( 1 , importedFile . size ( ) - 2 ) ; } if ( importedFile . find ( ".yapp" ) != std :: string :: npos ) { importedFile = importedFile . substr ( 0 , importedFile . find_last_of ( '.' ) ) + ".yapp.h" ; } if ( angledQuotes ) { importedFile = "<" + importedFile + ">" ; } else if ( doubleQuotes ) { importedFile = "\"" + importedFile + "\"" ; } else { importedFile = "\"" + importedFile + ".yapp.h\"" ; } preprocStored . push_back ( "include " + importedFile ) ; out << "pub __attribute__((annotate(\"__pub_preproc__\"))) void __pub_preproc__" << preprocStored . size ( ) - 1 << "();\n" ; } else { out << line << "\n" ; } } std :: string outFile = std :: filesystem :: path ( outputDir ) / ( inputFile . substr ( inputFile . find_last_of ( "/\\" ) + 1 ) + ".pp0" ) ; std :: ofstream p0f ( outFile ) ; if ( ! p0f ) { std :: cerr << "Failed to write pre-preprocessed file: " << outFile << "\n" ; exit ( 1 ) ; } p0f << out . str ( ) ; p0f . close ( ) ; return outFile ; } ;

__attribute__ ( ( annotate ( "pub" ) ) ) std :: string preprocessStep2 ( const std :: string & p0File , const std :: string & outputDir ) { std :: ifstream in ( p0File ) ; if ( ! in ) { std :: cerr << "Failed to open pre-preprocessed file for second preprocessing: " << p0File << "\n" ; exit ( 1 ) ; } std :: ostringstream out ; std :: string line ; std :: regex usingNamespaceFix ( R"((pub|priv)?\s*using\s+namespace\s+([a-zA-Z_][a-zA-Z0-9_:]*);)" ) ; while ( std :: getline ( in , line ) ) { std :: smatch m ; if ( std :: regex_search ( line , m , usingNamespaceFix ) ) { std :: string attr = m [ 1 ] . str ( ) ; std :: string namespaceName = m [ 2 ] . str ( ) ; out << "namespace " << namespaceName << " {};" ; if ( attr . empty ( ) ) { out << "using namespace " << namespaceName << ";\n" ; } else { out << attr << " using namespace " << namespaceName << ";\n" ; } } else { out << line << "\n" ; } } std :: string outFile = std :: filesystem :: path ( outputDir ) / ( p0File . substr ( p0File . find_last_of ( "/\\" ) + 1 ) + ".pp1" ) ; std :: ofstream p1f ( outFile ) ; if ( ! p1f ) { std :: cerr << "Failed to write second preprocessed file: " << outFile << "\n" ; exit ( 1 ) ; } p1f << out . str ( ) ; p1f . close ( ) ; return outFile ; } ;

__attribute__ ( ( annotate ( "priv" ) ) ) const char * usageString = R"(
Usage: yappc <source.yapp> [OPTIONS] -- [Preprocessor Args] -- [Compiler Args]
Options:
    -s          Toggle whether the source file is left in the output. This is useful for debugging.
    -g          Show generated intermediate preprocessing files.
    -h          Show this help message
    -o <output> Specify output folder for generated files (default: same as input file)
    -r          Remove the header from the generated .yapp.cpp file (not very useful)
    -c          Compile the generated files.
    --          Separator for different argument sections
Preprocessor Args:
    These arguments are passed directly to the preprocessor (clang -E).
    You can use -D to define macros, e.g., -DDEBUG=1.
Compiler Args:
    These arguments are passed directly to the compiler (clang++).
    You can use -o to specify the output file.
)" ;

std :: string GLOBAL_SOURCE_FILE ;

std :: string GLOBAL_INPUT_FILE ;

__attribute__ ( ( annotate ( "pub" ) ) ) int main ( int argc , char * * argv ) { if ( argc < 2 ) { std :: cerr << "Usage: ./yappc <source.yapp> [OPTIONS] -- [Preprocessor Args] -- [Compiler Args]\n" ; return 1 ; } std :: vector < std :: string > preprocArgs ; std :: vector < std :: string > compileArgs ; std :: vector < std :: string > myArgs ; int argState = 0 ; for ( int i = 2 ; i < argc ; ++ i ) { if ( strcmp ( argv [ i ] , "--" ) == 0 ) { argState ++ ; continue ; } if ( argState == 0 ) { myArgs . push_back ( argv [ i ] ) ; } else if ( argState == 1 ) { preprocArgs . push_back ( argv [ i ] ) ; } else if ( argState == 2 ) { compileArgs . push_back ( argv [ i ] ) ; } } bool debugMode = false ; bool sourceToggle = false ; bool removeHeader = false ; bool compileGenerated = false ; bool useStdlib = true ; std :: string outputDir = "" ; for ( int i = 0 ; i < myArgs . size ( ) ; i ++ ) { std :: string arg = myArgs [ i ] ; if ( arg == "-s" ) { sourceToggle = true ; } if ( arg == "-g" ) { debugMode = true ; } if ( arg == "-h" ) { std :: cout << usageString ; return 0 ; } if ( arg == "-o" ) { if ( i + 1 >= myArgs . size ( ) ) { std :: cerr << "Error: -o option requires an argument.\n" ; return 1 ; } else if ( myArgs [ i + 1 ] [ 0 ] == '-' ) { std :: cerr << "Error: -o option requires a directory argument.\n" ; return 1 ; } else { outputDir = myArgs [ i + 1 ] ; i ++ ; std :: filesystem :: path dirPath ( outputDir ) ; if ( ! std :: filesystem :: exists ( dirPath ) ) { std :: cerr << "Warning: Specified output directory does not exist. Creating: " << outputDir << "\n" ; std :: filesystem :: create_directories ( dirPath ) ; } } } if ( arg == "-r" ) { removeHeader = true ; } if ( arg == "-c" ) { compileGenerated = true ; } if ( arg == "--no-std" || arg == "--no-stdlib" ) { useStdlib = false ; } } std :: string base = argv [ 1 ] ; size_t slash = base . find_last_of ( "/\\" ) ; size_t dot = base . find_last_of ( '.' ) ; std :: string filename = base . substr ( slash == std :: string :: npos ? 0 : slash + 1 , dot - ( slash == std :: string :: npos ? 0 : slash + 1 ) ) ; std :: string dir = ( slash == std :: string :: npos ) ? "./" : base . substr ( 0 , slash + 1 ) ; if ( outputDir . empty ( ) ) { outputDir = dir ; } std :: string step0File = prePreprocess ( argv [ 1 ] , outputDir , useStdlib ) ; std :: string step1File = preprocessStep2 ( step0File , outputDir ) ; std :: string preprocOutputFile = step1File ; preprocOutputFile = preprocOutputFile . substr ( 0 , preprocOutputFile . size ( ) - 2 ) + ".pp2" ; std :: string preprocCommand = "clang -E " ; for ( const auto & arg : preprocArgs ) { preprocCommand += "\"" + arg + "\" " ; } preprocCommand += "\"-Dpub=__attribute__((annotate(\\\"pub\\\")))\" " ; preprocCommand += "\"-Dpriv=__attribute__((annotate(\\\"priv\\\")))\" " ; preprocCommand += "-D__yaplusplus " ; preprocCommand += "-x c++ \"" + step1File + "\" > \"" + preprocOutputFile + "\"" ; if ( system ( preprocCommand . c_str ( ) ) != 0 ) { std :: cerr << "Preprocessing failed.\n" ; return 1 ; } std :: ifstream preprocFile ( preprocOutputFile ) ; if ( ! preprocFile ) { std :: cerr << "Failed to open preprocessed file: " << preprocOutputFile << "\n" ; return 1 ; } std :: string line ; std :: ostringstream cleanedOutput ; while ( std :: getline ( preprocFile , line ) ) { if ( line . empty ( ) || line [ 0 ] != '#' ) { cleanedOutput << line << "\n" ; } } preprocFile . close ( ) ; std :: ofstream cleanedFile ( preprocOutputFile ) ; if ( ! cleanedFile ) { std :: cerr << "Failed to write cleaned preprocessed file: " << preprocOutputFile << "\n" ; return 1 ; } cleanedFile << cleanedOutput . str ( ) ; cleanedFile . close ( ) ; CXIndex index = clang_createIndex ( 0 , 0 ) ; const char * args [ ] = { "-x" , "c++-cpp-output" , "-std=c++20" , "-Dpub=__attribute__((annotate(\"pub\")))" , "-Dpriv=__attribute__((annotate(\"priv\")))" , "-P" } ; GLOBAL_SOURCE_FILE = argv [ 1 ] ; GLOBAL_INPUT_FILE = preprocOutputFile . c_str ( ) ; CXTranslationUnit tu = clang_parseTranslationUnit ( index , preprocOutputFile . c_str ( ) , args , sizeof ( args ) / sizeof ( args [ 0 ] ) , nullptr , 0 , CXTranslationUnit_Incomplete ) ; if ( ! tu ) { if ( unsigned numErrors = clang_getNumDiagnostics ( tu ) ) { unsigned displayOptions = clang_defaultDiagnosticDisplayOptions ( ) ; for ( unsigned i = 0 ; i < numErrors ; ++ i ) { CXDiagnostic diag = clang_getDiagnostic ( tu , i ) ; CXString str = clang_formatDiagnostic ( diag , displayOptions ) ; std :: cerr << clang_getCString ( str ) << "\n" ; clang_disposeString ( str ) ; clang_disposeDiagnostic ( diag ) ; } return 2 ; } std :: cerr << "Failed to parse input file.\n" ; return 1 ; } CXCursor root = clang_getTranslationUnitCursor ( tu ) ; clang_visitChildren ( root , visitor , & tu ) ; writeFiles ( filename , outputDir ) ; clang_disposeTranslationUnit ( tu ) ; clang_disposeIndex ( index ) ; if ( compileGenerated ) { std :: cout << "WARNING: Auto compiling generated files is not recommended. Use with caution." << std :: endl ; std :: string outdirfilename = std :: filesystem :: path ( outputDir ) / ( filename + ".yapp.cpp" ) ; std :: string compileCommand = "clang++ \"" + outdirfilename + "\" " ; for ( const auto & arg : compileArgs ) { compileCommand += "\"" + arg + "\" " ; } if ( system ( compileCommand . c_str ( ) ) != 0 ) { std :: cerr << "Compilation failed.\n" ; return 1 ; } } if ( ! debugMode ) { std :: remove ( preprocOutputFile . c_str ( ) ) ; std :: remove ( step1File . c_str ( ) ) ; std :: remove ( step0File . c_str ( ) ) ; if ( ( ! compileGenerated && sourceToggle ) || ( compileGenerated && ! sourceToggle ) ) { std :: remove ( ( std :: filesystem :: path ( outputDir ) / ( filename + ".yapp.cpp" ) ) . c_str ( ) ) ; } if ( removeHeader ) { std :: remove ( ( std :: filesystem :: path ( outputDir ) / ( filename + ".yapp.h" ) ) . c_str ( ) ) ; } } return 0 ; } ;

#undef pub
#undef priv
