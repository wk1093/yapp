#include "visitor.yapp.h"

#define pub
#define priv

__attribute__ ( ( annotate ( "pub" ) ) ) std :: vector < DeclInfo > decls ;

__attribute__ ( ( annotate ( "pub" ) ) ) int orderCounter = 0 ;

__attribute__ ( ( annotate ( "pub" ) ) ) std :: unordered_set < std :: string > typedefBackedTags ;

__attribute__ ( ( annotate ( "pub" ) ) ) std :: vector < std :: string > anonymousTypes ;

__attribute__ ( ( annotate ( "priv" ) ) ) bool isTemplateType ( CXCursorKind kind ) { return ( kind == CXCursor_ClassTemplate || kind == CXCursor_ClassTemplatePartialSpecialization || kind == CXCursor_TypeAliasTemplateDecl || kind == CXCursor_FunctionTemplate ) ; } ;

__attribute__ ( ( annotate ( "priv" ) ) ) bool hasConstexprKeyword ( CXCursor cursor ) { CXSourceRange range = clang_getCursorExtent ( cursor ) ; CXTranslationUnit tu = clang_Cursor_getTranslationUnit ( cursor ) ; CXToken * tokens = nullptr ; unsigned numTokens = 0 ; clang_tokenize ( tu , range , & tokens , & numTokens ) ; bool found = false ; for ( unsigned i = 0 ; i < numTokens ; ++ i ) { CXString spelling = clang_getTokenSpelling ( tu , tokens [ i ] ) ; std :: string tokenStr = clang_getCString ( spelling ) ; clang_disposeString ( spelling ) ; if ( tokenStr == "constexpr" ) { found = true ; break ; } if ( tokenStr == "{" ) { break ; } if ( tokenStr == toStdString ( clang_getCursorSpelling ( cursor ) ) ) { break ; } } clang_disposeTokens ( tu , tokens , numTokens ) ; return found ; } ;

__attribute__ ( ( annotate ( "priv" ) ) ) bool hasTemplateKeyword ( CXCursor cursor ) { CXSourceRange range = clang_getCursorExtent ( cursor ) ; CXTranslationUnit tu = clang_Cursor_getTranslationUnit ( cursor ) ; CXToken * tokens = nullptr ; unsigned numTokens = 0 ; clang_tokenize ( tu , range , & tokens , & numTokens ) ; bool found = false ; for ( unsigned i = 0 ; i < numTokens ; ++ i ) { CXString spelling = clang_getTokenSpelling ( tu , tokens [ i ] ) ; std :: string tokenStr = clang_getCString ( spelling ) ; clang_disposeString ( spelling ) ; if ( tokenStr == "template" ) { found = true ; break ; } if ( tokenStr == "{" ) { break ; } if ( tokenStr == toStdString ( clang_getCursorSpelling ( cursor ) ) ) { break ; } } clang_disposeTokens ( tu , tokens , numTokens ) ; return found ; } ;

__attribute__ ( ( annotate ( "priv" ) ) ) bool hasConstKeyword ( CXCursor cursor ) { CXSourceRange range = clang_getCursorExtent ( cursor ) ; CXTranslationUnit tu = clang_Cursor_getTranslationUnit ( cursor ) ; CXToken * tokens = nullptr ; unsigned numTokens = 0 ; clang_tokenize ( tu , range , & tokens , & numTokens ) ; bool found = false ; for ( unsigned i = 0 ; i < numTokens ; ++ i ) { CXString spelling = clang_getTokenSpelling ( tu , tokens [ i ] ) ; std :: string tokenStr = clang_getCString ( spelling ) ; clang_disposeString ( spelling ) ; if ( tokenStr == "const" ) { found = true ; break ; } if ( tokenStr == "{" ) { break ; } if ( tokenStr == toStdString ( clang_getCursorSpelling ( cursor ) ) ) { break ; } } clang_disposeTokens ( tu , tokens , numTokens ) ; return found ; } ;

__attribute__ ( ( annotate ( "priv" ) ) ) bool isUsingDec ( CXCursor cursor ) { CXCursorKind kind = clang_getCursorKind ( cursor ) ; return ( kind == CXCursor_UsingDeclaration || kind == CXCursor_UsingDirective || kind == CXCursor_TypeAliasDecl ) ; } ;

__attribute__ ( ( annotate ( "pub" ) ) ) CXChildVisitResult visitor ( CXCursor cursor , CXCursor parent , CXClientData client_data ) { CXCursorKind kind = clang_getCursorKind ( cursor ) ; DeclInfo info ; info . name = toStdString ( clang_getCursorSpelling ( cursor ) ) ; info . usr = toStdString ( clang_getCursorUSR ( cursor ) ) ; if ( ! isUsingDec ( cursor ) ) { if ( ! clang_isDeclaration ( kind ) ) return CXChildVisit_Recurse ; if ( kind == CXCursor_LinkageSpec || kind == CXCursor_Namespace ) { return CXChildVisit_Recurse ; } } std :: string annotation = getAnnotate ( cursor ) ; if ( isUsingDec ( cursor ) && annotation . empty ( ) ) { annotation = "pub" ; } if ( annotation . empty ( ) ) { if ( kind == CXCursor_TypedefDecl || kind == CXCursor_TypeAliasDecl || kind == CXCursor_StructDecl || CXCursor_UnionDecl || kind == CXCursor_ClassDecl ) { annotation = "pub" ; } else if ( clang_isCursorDefinition ( cursor ) ) { annotation = "priv" ; } else { annotation = "pub" ; } } info . annotation = annotation ; info . isDefinition = clang_isCursorDefinition ( cursor ) ; info . isInline = clang_Cursor_isFunctionInlined ( cursor ) ; info . isExternC = isExternC ( cursor ) ; info . isExtern = ( clang_getCursorLinkage ( cursor ) == CXLinkage_External ) && clang_Cursor_hasVarDeclExternalStorage ( cursor ) ; info . kind = kind ; info . namespaces = getNamespaceChain ( cursor ) ; info . isStatic = ( clang_Cursor_getStorageClass ( cursor ) == CX_SC_Static ) ; info . isConst = hasConstKeyword ( cursor ) ; info . isTemplate = false ; info . typeUsr = "" ; info . isUsingDec = isUsingDec ( cursor ) ; auto ct = clang_getCursorType ( cursor ) ; auto typeDecl = clang_getTypeDeclaration ( ct ) ; if ( ! clang_Cursor_isNull ( typeDecl ) ) { info . typeUsr = toStdString ( clang_getCursorUSR ( typeDecl ) ) ; } if ( isTemplateType ( kind ) ) { info . isTemplate = true ; } if ( ! info . isTemplate ) { CXCursor parent = clang_getCursorSemanticParent ( cursor ) ; CXCursorKind pkind = clang_getCursorKind ( parent ) ; if ( isTemplateType ( pkind ) ) { info . isTemplate = true ; } } if ( hasConstexprKeyword ( cursor ) ) { info . isConstexpr = true ; } if ( kind == CXCursor_StructDecl || kind == CXCursor_UnionDecl || kind == CXCursor_EnumDecl ) { auto range = clang_Cursor_getSpellingNameRange ( cursor , 0 , 0 ) ; CXTranslationUnit tu = * ( CXTranslationUnit * ) client_data ; CXToken * tokens = nullptr ; unsigned numTokens = 0 ; clang_tokenize ( tu , range , & tokens , & numTokens ) ; for ( unsigned i = 0 ; i < numTokens ; ++ i ) { CXString spelling = clang_getTokenSpelling ( tu , tokens [ i ] ) ; if ( clang_getTokenKind ( tokens [ i ] ) == CXToken_Keyword && ( strcmp ( clang_getCString ( spelling ) , "struct" ) == 0 ) ) { info . name = "" ; anonymousTypes . push_back ( info . usr ) ; } if ( clang_getTokenKind ( tokens [ i ] ) == CXToken_Keyword && ( strcmp ( clang_getCString ( spelling ) , "union" ) == 0 ) ) { info . name = "" ; anonymousTypes . push_back ( info . usr ) ; } if ( clang_getTokenKind ( tokens [ i ] ) == CXToken_Keyword && ( strcmp ( clang_getCString ( spelling ) , "enum" ) == 0 ) ) { info . name = "" ; anonymousTypes . push_back ( info . usr ) ; } clang_disposeString ( spelling ) ; } clang_disposeTokens ( tu , tokens , numTokens ) ; } CXTranslationUnit tu = * ( CXTranslationUnit * ) client_data ; info . code = getSourceText ( cursor , tu ) ; info . sourceOrderIndex = orderCounter ++ ; if ( clang_getCursorKind ( cursor ) == CXCursor_TypedefDecl ) { clang_visitChildren ( cursor , [ ] ( CXCursor c , CXCursor , CXClientData client_data ) { auto kind = clang_getCursorKind ( c ) ; if ( kind == CXCursor_StructDecl || kind == CXCursor_UnionDecl || kind == CXCursor_EnumDecl ) { std :: string structName = toStdString ( clang_getCursorUSR ( c ) ) ; if ( ! structName . empty ( ) ) { static_cast < std :: unordered_set < std :: string > * > ( client_data ) -> insert ( structName ) ; } } return CXChildVisit_Continue ; } , & typedefBackedTags ) ; } if ( info . isTemplate && info . annotation == "" ) { info . annotation = "pub" ; } decls . push_back ( info ) ; return CXChildVisit_Continue ; } ;

#undef pub
#undef priv
