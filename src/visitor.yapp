#import std.set

#import <clang-c/Index.h>
#import <vector>
#import <string>
#import <cstring>
#import decl_utils

pub vec<DeclInfo> decls;
pub int orderCounter = 0;
pub set::unordered<str> typedefBackedTags;
pub vec<str> anonymousTypes;

priv bool isTemplateType(CXCursorKind kind) {
    return (kind == CXCursor_ClassTemplate ||
            kind == CXCursor_ClassTemplatePartialSpecialization ||
            kind == CXCursor_TypeAliasTemplateDecl ||
            kind == CXCursor_FunctionTemplate);
}

priv bool hasConstexprKeyword(CXCursor cursor) {
    CXSourceRange range = clang_getCursorExtent(cursor);
    CXTranslationUnit tu = clang_Cursor_getTranslationUnit(cursor);
    CXToken* tokens = nullptr;
    unsigned numTokens = 0;
    clang_tokenize(tu, range, &tokens, &numTokens);
    bool found = false;
    for (unsigned i = 0; i < numTokens; ++i) {
        CXString spelling = clang_getTokenSpelling(tu, tokens[i]);
        str tokenStr = clang_getCString(spelling);
        clang_disposeString(spelling);
        // Check for 'constexpr' keyword
        if (tokenStr == "constexpr") {
            found = true;
            break;
        }
        if (tokenStr == "{") {
            break; // Stop checking tokens after the opening brace
        }
        if (tokenStr == toStdString(clang_getCursorSpelling(cursor))) {
            break;
        }
    }
    clang_disposeTokens(tu, tokens, numTokens);
    return found;
}

priv bool hasTemplateKeyword(CXCursor cursor) {
    CXSourceRange range = clang_getCursorExtent(cursor);
    CXTranslationUnit tu = clang_Cursor_getTranslationUnit(cursor);

    CXToken* tokens = nullptr;
    unsigned numTokens = 0;
    clang_tokenize(tu, range, &tokens, &numTokens);

    bool found = false;
    for (unsigned i = 0; i < numTokens; ++i) {
        CXString spelling = clang_getTokenSpelling(tu, tokens[i]);
        str tokenStr = clang_getCString(spelling);
        clang_disposeString(spelling);

        if (tokenStr == "template") {
            found = true;
            break;
        }
        if (tokenStr == "{") {
            break; // Stop checking tokens after the opening brace
        }
        if (tokenStr == toStdString(clang_getCursorSpelling(cursor))) {
            break;
        }
    }

    clang_disposeTokens(tu, tokens, numTokens);
    return found;
}

priv bool hasConstKeyword(CXCursor cursor) {
    CXSourceRange range = clang_getCursorExtent(cursor);
    CXTranslationUnit tu = clang_Cursor_getTranslationUnit(cursor);

    CXToken* tokens = nullptr;
    unsigned numTokens = 0;
    clang_tokenize(tu, range, &tokens, &numTokens);

    bool found = false;
    for (unsigned i = 0; i < numTokens; ++i) {
        CXString spelling = clang_getTokenSpelling(tu, tokens[i]);
        str tokenStr = clang_getCString(spelling);
        clang_disposeString(spelling);

        if (tokenStr == "const") {
            found = true;
            break;
        }
        if (tokenStr == "{") {
            break; // Stop checking tokens after the opening brace
        }
        if (tokenStr == toStdString(clang_getCursorSpelling(cursor))) {
            break;
        }
    }

    clang_disposeTokens(tu, tokens, numTokens);
    return found;
}

priv bool isUsingDec(CXCursor cursor) {
    CXCursorKind kind = clang_getCursorKind(cursor);
    return (kind == CXCursor_UsingDeclaration || kind == CXCursor_UsingDirective || kind == CXCursor_TypeAliasDecl);
}

pub CXChildVisitResult visitor(CXCursor cursor, CXCursor parent, CXClientData client_data) {
    CXCursorKind kind = clang_getCursorKind(cursor);
    DeclInfo info;
    info.name = toStdString(clang_getCursorSpelling(cursor));
    info.usr = toStdString(clang_getCursorUSR(cursor));
    if (!isUsingDec(cursor)) {
        if (!clang_isDeclaration(kind)) return CXChildVisit_Recurse;
        if (kind == CXCursor_LinkageSpec || kind == CXCursor_Namespace) {
            return CXChildVisit_Recurse;
        }
    }
    str annotation = getAnnotate(cursor);
    if (isUsingDec(cursor) && annotation.empty()) {
        annotation = "pub";
    }
    if (annotation.empty()) {
        if (kind == CXCursor_TypedefDecl || kind == CXCursor_TypeAliasDecl || kind == CXCursor_StructDecl || CXCursor_UnionDecl || kind == CXCursor_ClassDecl) {
            annotation = "pub";
        }
        else if (clang_isCursorDefinition(cursor)) {
            annotation = "priv";
        } else {
            annotation = "pub";
        }
    }
    info.annotation = annotation;
    info.isDefinition = clang_isCursorDefinition(cursor);
    info.isInline = clang_Cursor_isFunctionInlined(cursor);
    info.isExternC = isExternC(cursor);
    info.isExtern = (clang_getCursorLinkage(cursor) == CXLinkage_External) && clang_Cursor_hasVarDeclExternalStorage(cursor);
    info.kind = kind;
    info.namespaces = getNamespaceChain(cursor);
    // Robust static detection for functions and variables
    info.isStatic = (clang_Cursor_getStorageClass(cursor) == CX_SC_Static);
    info.isConst = hasConstKeyword(cursor);
    // --- TEMPLATE DETECTION ---
    info.isTemplate = false;
    info.typeUsr = "";
    info.isUsingDec = isUsingDec(cursor);
    auto ct = clang_getCursorType(cursor);
    auto typeDecl = clang_getTypeDeclaration(ct);
    if (!clang_Cursor_isNull(typeDecl)) {
        info.typeUsr = toStdString(clang_getCursorUSR(typeDecl));
    }

    // Mark as template if this is a template cursor kind
    if (isTemplateType(kind)) {
        info.isTemplate = true;
    }
    // Also mark as template if parent is a template
    if (!info.isTemplate) {
        CXCursor parent = clang_getCursorSemanticParent(cursor);
        CXCursorKind pkind = clang_getCursorKind(parent);
        if (isTemplateType(pkind)) {
            info.isTemplate = true;
        }
    }
    // Also mark as template if it has template parameters
    // if (!info.isTemplate) {
    //     int templateParamCount = clang_Cursor_getNumArguments(cursor);
    //     if (templateParamCount == -1) {
    //         // not a callable, try children
    //         clang_visitChildren(
    //             cursor,
    //             [](CXCursor c, CXCursor parent, CXClientData data) {
    //                 CXCursorKind ck = clang_getCursorKind(c);
    //                 if (isTemplateType(ck)) {
    //                     bool* isTemplate = static_cast<bool*>(data);
    //                     *isTemplate = true;
    //                     return CXChildVisit_Break;
    //                 }
    //                 return CXChildVisit_Recurse;
    //             },
    //             &info.isTemplate
    //         );
    //     } else if (templateParamCount > 0) {
    //         info.isTemplate = true;
    //     }
    // }

    // if (!info.isTemplate && hasTemplateKeyword(cursor)) {
    //     info.isTemplate = true; // If the cursor has a 'template' keyword, mark it as template
    // }
    if (hasConstexprKeyword(cursor)) {
        info.isConstexpr = true; // If the cursor has a 'constexpr' keyword, mark it as constexpr
    }

    if (kind == CXCursor_StructDecl || kind == CXCursor_UnionDecl || kind == CXCursor_EnumDecl) {
        auto range = clang_Cursor_getSpellingNameRange(cursor, 0, 0);
        CXTranslationUnit tu = *(CXTranslationUnit*)client_data;
        CXToken* tokens = nullptr;
        unsigned numTokens = 0;
        clang_tokenize(tu, range, &tokens, &numTokens);
        for (unsigned i = 0; i < numTokens; ++i) {
            CXString spelling = clang_getTokenSpelling(tu, tokens[i]);
            if (clang_getTokenKind(tokens[i]) == CXToken_Keyword &&
                (strcmp(clang_getCString(spelling), "struct") == 0)) {
                info.name = "";
                anonymousTypes.push_back(info.usr); // Track anonymous struct/union/enum USRs
            }
            if (clang_getTokenKind(tokens[i]) == CXToken_Keyword &&
                (strcmp(clang_getCString(spelling), "union") == 0)) {
                info.name = "";
                anonymousTypes.push_back(info.usr); // Track anonymous struct/union/enum USRs
            }
            if (clang_getTokenKind(tokens[i]) == CXToken_Keyword &&
                (strcmp(clang_getCString(spelling), "enum") == 0)) {
                info.name = "";
                anonymousTypes.push_back(info.usr); // Track anonymous struct/union/enum USRs
            }
            clang_disposeString(spelling);
        }
        clang_disposeTokens(tu, tokens, numTokens);
    }
    CXTranslationUnit tu = *(CXTranslationUnit*)client_data;
    info.code = getSourceText(cursor, tu);
    info.sourceOrderIndex = orderCounter++;
    if (clang_getCursorKind(cursor) == CXCursor_TypedefDecl) {
        clang_visitChildren(cursor, [](CXCursor c, CXCursor, CXClientData client_data) {
            auto kind = clang_getCursorKind(c);
            if (kind == CXCursor_StructDecl || kind == CXCursor_UnionDecl || kind == CXCursor_EnumDecl) {
                str structName = toStdString(clang_getCursorUSR(c));
                if (!structName.empty()) {
                    static_cast<set::unordered<str>*>(client_data)->insert(structName);
                }
            }
            return CXChildVisit_Continue;
        }, &typedefBackedTags);
    }
    if (info.isTemplate && info.annotation == "") {
        info.annotation = "pub";
    }
    decls.push_back(info);

    return CXChildVisit_Continue;
}
