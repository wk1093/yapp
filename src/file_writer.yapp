#import <clang-c/Index.h>
#import <cstring>
#import <filesystem>
#import <fstream>
#import <iostream>
#import <unordered_map>
#import <algorithm>
#import <string>

#import visitor
#import decl_utils

priv void emitWithNamespaces(std::ostream& out, const std::vector<DeclInfo>& decls) {
    out << "// Emitted by yappc\n";
    out << "// Emitting " << decls.size() << " declarations\n\n";
    std::vector<std::string> currentNS;
    bool inExternC = false;
    for (size_t idx = 0; idx < decls.size(); ++idx) {
        const auto& d = decls[idx];
        size_t common = 0;
        while (common < currentNS.size() && common < d.namespaces.size() &&
               currentNS[common] == d.namespaces[common]) {
            ++common;
        }
        // Always close extern "C" before closing/opening namespaces
        if (inExternC && (currentNS.size() != common || d.namespaces.size() != common)) {
            out << "#ifdef __cplusplus\n}\n#endif\n";
            inExternC = false;
        }
        // Close namespaces
        for (size_t i = currentNS.size(); i-- > common;) {
            out << "}\n";
        }
        // Open namespaces
        for (size_t i = common; i < d.namespaces.size(); ++i) {
            out << "namespace " << d.namespaces[i] << " {\n";
        }
        currentNS = d.namespaces;
        // Open extern "C" if needed (always after namespace is open)
        if (d.isExternC && !inExternC) {
            out << "#ifdef __cplusplus\nextern \"C\" {\n#endif\n";
            inExternC = true;
        }
        // Output the declaration
        out << d.code << ";\n\n";
        // If the next decl is in a different namespace or extern "C" state, close extern "C" now
        bool nextNeedsExtern = false;
        size_t nextCommon = common;
        if (idx + 1 < decls.size()) {
            const auto& next = decls[idx + 1];
            nextCommon = 0;
            while (nextCommon < currentNS.size() && nextCommon < next.namespaces.size() &&
                   currentNS[nextCommon] == next.namespaces[nextCommon]) {
                ++nextCommon;
            }
            nextNeedsExtern = next.isExternC;
        }
        if (inExternC && (idx + 1 == decls.size() || currentNS.size() != nextCommon || !nextNeedsExtern)) {
            out << "#ifdef __cplusplus\n}\n#endif\n";
            inExternC = false;
        }
    }
    // Close any open namespaces
    for (size_t i = currentNS.size(); i-- > 0;) {
        out << "}\n";
    }
}

// Helper: collect unique decls by USR
priv std::vector<DeclInfo> collectUniqueDecls() {
    std::vector<DeclInfo> seen;
    std::unordered_map<std::string, size_t> usrToIndex;
    for (auto& d : decls) {
        if (d.annotation.empty()) {
            std::cout << "Warning: Declaration without annotation for " << d.name << "\n";
            d.annotation = "priv";
        }
        auto it = usrToIndex.find(d.usr);
        if (it == usrToIndex.end()) {
            usrToIndex[d.usr] = seen.size();
            seen.push_back(d);
        } else {
            auto& existing = seen[it->second];
            if (existing.annotation == "priv" && d.annotation == "pub") {
                existing = d;
            } else if (!existing.isDefinition && d.isDefinition) {
                // keep existing
            }
        }
    }
    std::sort(seen.begin(), seen.end(), [](const DeclInfo& a, const DeclInfo& b) {
        return a.sourceOrderIndex < b.sourceOrderIndex;
    });
    return seen;
}

// Helper: check if a DeclInfo is a global variable
priv bool isGlobalVariable(const DeclInfo& d) {
    // Not a function, not a type, not static, not anonymous, and not a member
    return !d.isStatic && !isAnonymousStruct(d) &&
        d.kind == CXCursor_VarDecl &&
        d.namespaces.empty(); // global scope only
}

// Helper: check if the DeclInfo's type is an anonymous struct/union/enum
template<typename T>
priv bool isAnonymousTypeCursor(T cursor) {
    if (!clang_Cursor_isNull(cursor)) {
        CXString spelling = clang_getCursorSpelling(cursor);
        bool anon = !clang_getCString(spelling) || !*clang_getCString(spelling);
        clang_disposeString(spelling);
        CXCursorKind kind = clang_getCursorKind(cursor);
        if (anon && (kind == CXCursor_StructDecl || kind == CXCursor_UnionDecl || kind == CXCursor_EnumDecl)) {
            return true;
        }
    }
    return false;
}

priv bool isAnonymousType(const DeclInfo& d) {

    if (d.typeUsr.empty()) {
        // If we don't have a type USR, we can't check for anonymous types
        return false;
    }
    // Check if the type is an anonymous struct/union/enum
    if (std::find(anonymousTypes.begin(), anonymousTypes.end(), d.typeUsr)
        != anonymousTypes.end()) {
        return true;
    }
    return false;
}

priv extern std::vector<std::string> preprocStored; // from main.cpp

// Helper: collect public decls for header
priv std::vector<DeclInfo> collectHeaderDecls(const std::vector<DeclInfo>& seen) {
    std::vector<DeclInfo> pubDecls;
    for (const auto& d : seen) {
        // if name startswith "__pub_preproc__", special case
        if (d.annotation == "pub" && d.name.find("__pub_preproc__") == 0) {
            // Special case for preprocessor annotations
            // name should be "__pub_preproc__<index>"
            // we need to find the index
            size_t index = std::stoul(d.name.substr(strlen("__pub_preproc__")));
            if (index >= preprocStored.size()) {
                std::cerr << "Warning: __pub_preproc__ index out of bounds: " << index << "\n";
                continue;
            }
            DeclInfo copy = d;
            copy.code = "#"+preprocStored[index]+"\n";
            pubDecls.push_back(copy);
            continue;
        }
        if (d.isStatic && !d.isUsingDec) continue; // skip static decls in header
        if (d.annotation == "pub") {
            if (isAnonymousStruct(d)) {
                continue;
            }
            if (((d.kind == CXCursor_StructDecl ||
                d.kind == CXCursor_UnionDecl ||
                d.kind == CXCursor_EnumDecl) &&
                typedefBackedTags.count(d.usr)) && !d.isUsingDec)
            {
                continue;
            }
            DeclInfo copy = d;
            // For templates, always emit the full definition
            if (!d.isTemplate && !d.isConstexpr && d.isDefinition && !d.isInline &&
                (d.kind == CXCursor_FunctionDecl || d.kind == CXCursor_CXXMethod)) {
                copy.code = makeDeclaration(d.code);
            }
            // For globals variables, emit as extern in header (but not for anonymous types)
            if (isGlobalVariable(d) && !d.isUsingDec) {
                if (isAnonymousType(d)) {
                    // Skip anonymous types in header
                    continue;
                }
                // Do not emit extern for constexpr variables
                if (!d.isConstexpr && !d.isExtern) {
                    // Remove initializer for extern declaration
                    std::string code = d.code;
                    size_t eq = code.find('=');
                    if (eq != std::string::npos) code = code.substr(0, eq);
                    // Simple trim (left and right)
                    code.erase(0, code.find_first_not_of(" \t\n\r"));
                    code.erase(code.find_last_not_of(" \t\n\r") + 1);
                    if (!code.empty() && code.back() == ';') code.pop_back();
                    copy.code = "extern \n" + code;
                }
            }
            pubDecls.push_back(copy);
        }
    }
    std::sort(pubDecls.begin(), pubDecls.end(), [](const DeclInfo& a, const DeclInfo& b) {
        return a.sourceOrderIndex < b.sourceOrderIndex;
    });
    return pubDecls;
}

// Helper: collect source decls for cpp file
priv std::vector<DeclInfo> collectSourceDecls(const std::vector<DeclInfo>& seen) {
    std::unordered_map<std::string, bool> pubHasDefinition;
    for (const auto& d : seen) {
        if (d.annotation == "pub" && d.isDefinition) {
            pubHasDefinition[d.name] = true;
        }
    }
    std::vector<DeclInfo> sourceDecls;
    for (const auto& d : decls) {
        if (d.annotation.empty()) {
            const_cast<DeclInfo&>(d).annotation = "priv";
        }
        if (d.kind == CXCursor_TypedefDecl || d.kind == CXCursor_TypeAliasDecl ||
            d.kind == CXCursor_StructDecl || d.kind == CXCursor_EnumDecl ||
            d.kind == CXCursor_UnionDecl || d.kind == CXCursor_ClassDecl) {
            continue;
        }
        // Do not emit template definitions in the source file
        // Skip anonymous structs in source as well
        if (isAnonymousStruct(d)) continue;
        // For priv global variables, only emit in source
        if (isGlobalVariable(d) && d.annotation == "priv") {
            sourceDecls.push_back(d);
            continue;
        }
        if (d.annotation == "pub") {
            if (d.isTemplate) continue;
            if (d.isConstexpr) continue; // Skip constexpr variables in source
            // if (d.isConst) continue;
            if (!d.isDefinition && pubHasDefinition[d.name]) continue;
            if (d.isInline) continue;
            if (!d.isDefinition) continue;
            if (d.kind == CXCursor_FunctionDecl || d.kind == CXCursor_CXXMethod) {
                // functions with default parameters should have the default paremeters removed from the source (if they are in the header)
                // find the first '(' and the ASSOCIATED ')' (not the first/last one)
                size_t start = d.code.find('(', d.code.find(d.name));
                int parenCount = 1;
                size_t end = start+1;
                while (end < d.code.size() && parenCount > 0) {
                    if (d.code[end] == '(') {
                        ++parenCount;
                    } else if (d.code[end] == ')') {
                        --parenCount;
                    }
                    ++end;
                }
                std::string params = d.code.substr(start + 1, end - start - 2);
                if (parenCount == 0 && !params.empty() && params.find('=') != std::string::npos) {
                    std::cout << "Removing default parameters from function: " << d.name << params << "\n";
                    // We found the end of the parameters
                    // Remove default parameters
                    size_t pos = params.find('=');
                    while (pos != std::string::npos) {
                        size_t nextComma = params.find(',', pos);
                        if (nextComma == std::string::npos) {
                            params.erase(pos);
                            break;
                        } else {
                            params.erase(pos, nextComma - pos + 1);
                        }
                        pos = params.find('=', pos);
                    }
                    // Reconstruct the code with the modified parameters
                    std::string newCode = d.code.substr(0, start + 1) + params + d.code.substr(end - 1);
                    const_cast<DeclInfo&>(d).code = newCode;
                }
            }
        }
        // static decls are allowed in source
        sourceDecls.push_back(d);
    }
    std::sort(sourceDecls.begin(), sourceDecls.end(), [](const DeclInfo& a, const DeclInfo& b) {
        return a.sourceOrderIndex < b.sourceOrderIndex;
    });
    return sourceDecls;
}

pub void writeFiles(const std::string& base, const std::string& dir) {
    std::ofstream hfile(std::filesystem::path(dir) / (base + ".yapp.h"));
    std::ofstream cppfile(std::filesystem::path(dir) / (base + ".yapp.cpp"));
    hfile << "#pragma once\n";
    hfile << "#define pub\n#define priv\n\n";
    cppfile << "#include \"" << base << ".yapp.h\"\n\n";
    cppfile << "#define pub\n#define priv\n\n";
    auto seen = collectUniqueDecls();
    auto pubDecls = collectHeaderDecls(seen);
    emitWithNamespaces(hfile, pubDecls);
    hfile << "#undef pub\n#undef priv\n";
    auto sourceDecls = collectSourceDecls(seen);
    emitWithNamespaces(cppfile, sourceDecls);
    cppfile << "#undef pub\n#undef priv\n";
}
