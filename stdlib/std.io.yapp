#import <iostream>
#import <fstream>
#import std.str
#import std.result

namespace file {
    using reader = std::ifstream;
    using writer = std::ofstream;
    using stream = std::fstream;
};

namespace io {
    enum io_output_stream_type {
        out,
        err
    }
    // alternate to printf for output. instead of using a formatted string, all the arguments ar outputter with std::cout
    template<typename... Args>
    pub void print(Args... args) {
        (void)std::initializer_list<int>{(std::cout << args, 0)...};
    }

    template<typename... Args>
    pub void print(io_output_stream_type type, Args... args) {
        if (type == out) {
            (void)std::initializer_list<int>{(std::cout << args, 0)...};
        } else {
            (void)std::initializer_list<int>{(std::cerr << args, 0)...};
        }
    }

    template<typename... Args>
    pub void print(std::ostream& stream, Args... args) {
        (void)std::initializer_list<int>{(stream << args, 0)...};
    }

    template<typename... Args>
    pub void println(Args... args) {
        (void)std::initializer_list<int>{(std::cout << args, 0)...};
        std::cout << std::endl;
    }

    template<typename... Args>
    pub void println(io_output_stream_type type, Args... args) {
        if (type == out) {
            (void)std::initializer_list<int>{(std::cout << args, 0)...};
            std::cout << std::endl;
        } else {
            (void)std::initializer_list<int>{(std::cerr << args, 0)...};
            std::cerr << std::endl;
        }
    }

    template<typename... Args>
    pub void println(std::ostream& stream, Args... args) {
        (void)std::initializer_list<int>{(stream << args, 0)...};
        stream << std::endl;
    }

    template<typename... Args>
    pub void printError(Args... args) {
        (void)std::initializer_list<int>{(std::cerr << args, 0)...};
    }

    template<typename... Args>
    pub void printlnError(Args... args) {
        (void)std::initializer_list<int>{(std::cerr << args, 0)...};
        std::cerr << std::endl;
    }

    template<typename T>
    pub T read() {
        T value;
        std::cin >> value;
        return value;
    }

    template<typename T>
    pub T readLine() {
        T value;
        std::getline(std::cin, value);
        return value;
    }

    pub void flush() {
        std::cout.flush();
    }

    pub result<str> fileReadText(const str& filename) {
        file::reader file(filename);
        if (!file.is_open()) {
            return res::err("Not Found: " + filename);
        }
        str content;
        str line;
        while (std::getline(file, line)) {
            content += line + "\n";
        }
        file.close();
        return res::ok(content);       
    }

    pub result<bytestr> fileReadBin(const str& filename) {
        file::reader file(filename, std::ios::binary);
        if (!file.is_open()) {
            return res::err("Not Found: " + filename);
        }
        bytestr content;
        file.seekg(0, std::ios::end);
        size_t size = file.tellg();
        file.seekg(0, std::ios::beg);
        content.resize(size);
        file.read(&content[0], size);
        file.close();
        return res::ok(content);
    }

    pub result<void> fileWrite(const str& filename, const str& content) {
        file::writer file(filename);
        if (!file.is_open()) {
            return res::err("Not Found: " + filename);
        }
        file << content;
        file.close();
        return res::ok();
    }

    pub result<void> fileAppend(const str& filename, const str& content) {
        file::writer file(filename, std::ios::app);
        if (!file.is_open()) {
            return res::err("Not Found: " + filename);
        }
        file << content;
        file.close();
        return res::ok();
    }
}